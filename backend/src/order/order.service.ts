// src/order/order.service.ts
import {
  BadRequestException,
  Injectable,
  NotFoundException,
} from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { Order } from "./entities/order.entity";
import { Event } from "../event/entities/event.entity";
import { User } from "../user/entities/user.entity";
import { CreateOrderDto } from "./dto/create-order.dto";
import { Ticket } from "../ticket/entities/ticket.entity";
import { EmailService } from "src/email/email.service";

@Injectable()
export class OrderService {
  constructor(
    @InjectRepository(Order)
    private readonly orderRepo: Repository<Order>,
    @InjectRepository(Ticket)
    private readonly ticketRepo: Repository<Ticket>,
    @InjectRepository(Event)
    private readonly eventRepo: Repository<Event>,
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
    private readonly emailService: EmailService,
  ) {}

  // –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Å—Ç–∞—Ç—É—Å–æ–º "pending"

  async createOrder(userId: string, dto: CreateOrderDto): Promise<Order> {
    try {
      const { eventId, ticketCount } = dto;

      const user = await this.userRepo.findOneBy({ id: Number(userId) });
      if (!user) {
        throw new NotFoundException("User not found");
      }

      const event = await this.eventRepo.findOneBy({ id: Number(eventId) });
      if (!event) {
        throw new NotFoundException("Event not found");
      }

      if (event.status !== "scheduled") {
        throw new BadRequestException("The event is not open for booking");
      }

      const soldTickets = await this.orderRepo
        .createQueryBuilder("o")
        .select("SUM(o.ticket_count)", "sum")
        .where("o.event_id = :eventId", { eventId: event.id })
        .andWhere("o.status IN (:...statuses)", { statuses: ["confirmed"] })
        .getRawOne();

      const totalSold = Number(soldTickets.sum) || 0;

      if (totalSold + ticketCount > event.total_tickets) {
        throw new BadRequestException(
          "Not enough tickets available for this event",
        );
      }

      const totalAmount = event.price * ticketCount;

      const order = this.orderRepo.create({
        user,
        event,
        total_amount: totalAmount,
        status: "pending",
        ticket_count: ticketCount,
      });

      return await this.orderRepo.save(order);
    } catch (error) {
      // optionally, throw standardized response if needed
      if (
        error instanceof BadRequestException ||
        error instanceof NotFoundException
      ) {
        throw error;
      }
      throw new BadRequestException(
        "An error occurred while creating the order",
      );
    }
  }

  // –≠—Ç–∞–ø 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Stripe webhook.
  // –ó–¥–µ—Å—å –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã —Å QR-–∫–æ–¥–∞–º–∏.
  async confirmOrder(orderId: string, stripePaymentId: string) {
    const order = await this.orderRepo.findOne({
      where: { id: Number(orderId) },
      relations: ["user", "event"],
    });
    if (!order) throw new NotFoundException("Order not found");

    if (order.status === "confirmed") return; // –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω

    order.status = "confirmed";
    order.stripe_payment_id = stripePaymentId;
    await this.orderRepo.save(order);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–ª–µ—Ç–æ–≤
    await this.generateTicketsForOrder(order);

    const tickets = await this.ticketRepo.find({
      where: { order: { id: Number(orderId) } },
    });

    if (!tickets || tickets.length === 0) {
      throw new Error("No tickets generated for the order");
    }

    const ticketsWithQr = tickets.map((ticket, index) => ({
      ticketId: ticket.ticket_code,
      qrCodeBase64: ticket.qr_code_data,
      cid: `qr_${index}_${ticket.ticket_code}`,
      qrBuffer: Buffer.from(ticket.qr_code_data.split(",")[1], "base64"),
    }));

    await this.emailService.sendTicketEmail(
      order.user.email,
      order.event.title,
      ticketsWithQr,
    );
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–ª–µ—Ç–æ–≤ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º QR-–∫–æ–¥–æ–º –¥–ª—è –∑–∞–∫–∞–∑–∞
  async generateTicketsForOrder(order: Order) {
    const tickets: Ticket[] = [];
    const QRCode = await import("qrcode");
    const { nanoid } = await import("nanoid"); // –£—Å—Ç–∞–Ω–æ–≤–∏ nanoid: npm i nanoid

    const baseVerifyUrl = "http://localhost:5173/t"; // üîÅ –ö–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–∞

    for (let i = 0; i < order.ticket_count; i++) {
      const ticketCode = nanoid(8); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ (8 —Å–∏–º–≤–æ–ª–æ–≤)

      // üîó –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π URL
      const ticketUrl = `${baseVerifyUrl}/${ticketCode}`;

      // üñº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
      const qrData = await QRCode.toDataURL(ticketUrl, {
        errorCorrectionLevel: "M", // –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫ (–º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)
        margin: 1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
        scale: 4, // –ù–µ–±–æ–ª—å—à–æ–π –º–∞—Å—à—Ç–∞–±, –Ω–æ –≤—Å—ë –µ—â—ë —á–∏—Ç–∞–µ–º—ã–π
      });

      const ticket = this.ticketRepo.create({
        order,
        ticket_code: ticketCode,
        qr_code_data: qrData,
      });

      tickets.push(ticket);
    }

    await this.ticketRepo.save(tickets);
    return tickets;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤–∞–ª–∏–¥–∞—Ü–∏–∏) –±–∏–ª–µ—Ç–∞ –ø–æ QR-–∫–æ–¥—É
  async validateTicket(ticketCode: string) {
    const ticket = await this.ticketRepo.findOne({
      where: { ticket_code: ticketCode },
      relations: ["order"],
    });
    if (!ticket) {
      throw new NotFoundException("Ticket not found");
    }
    if (ticket.is_used) {
      throw new Error("Ticket already used");
    }
    // –û—Ç–º–µ—á–∞–µ–º –±–∏–ª–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    ticket.is_used = true;
    ticket.used_at = new Date();
    await this.ticketRepo.save(ticket);
    return ticket;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–ø–ª–∞—Ç—ã)
  async getOrderById(orderId: number): Promise<Order> {
    const order = await this.orderRepo.findOneBy({ id: Number(orderId) });
    if (!order) throw new NotFoundException("Order not found");
    return order;
  }

  async getTicketsBySession(sessionId: string) {
    const order = await this.orderRepo.findOne({
      where: { stripe_payment_id: sessionId },
      relations: ["tickets", "event"],
    });

    if (!order) throw new NotFoundException("Order not found by session");
    return {
      orderId: order.id,
      tickets: order.tickets.map((ticket) => ({
        id: ticket.id,
        ticket_code: ticket.ticket_code,
        qr_code_data: ticket.qr_code_data,
      })),
      event: order.event,
    };
  }

  async getMyOrders(userId: number): Promise<Order[]> {
    return await this.orderRepo.find({
      where: {
        user: { id: userId },
        // status: 'pending', // –∏–ª–∏: In(['pending']) ‚Äî –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
      },
      relations: ["event"], // –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
      order: {
        createdAt: "DESC", // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –ø–æ –∂–µ–ª–∞–Ω–∏—é
      },
    });
  }
}
