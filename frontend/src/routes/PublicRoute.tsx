import { ReactNode, useContext, useEffect, useState } from "react";
import { Navigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";

interface PublicRouteProps {
    children: ReactNode;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getRedirectPath = (role: string): string => {
    switch (role) {
        case "admin":
            return "/admin";
        case "user":
            return "/dashboard";
        default:
            return "/dashboard";
    }
};

const PublicRoute = ({ children }: PublicRouteProps) => {
    const authContext = useContext(AuthContext);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (authContext) {
            setLoading(false);
        }
    }, [authContext]);

    if (loading) {
        return <div>Loading...</div>; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è `authContext`
    }

    if (authContext?.user) {
        console.log("‚úÖ User detected:", authContext.user);

        const lastVisitedRoute = localStorage.getItem("lastVisitedRoute") || "";
        const publicRoutes = ["/login", "/register"];
        const userRole = authContext.user.role;
        const roleBasedRedirect = getRedirectPath(userRole);

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º —Ç—É–¥–∞, –∏–Ω–∞—á–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —Ä–æ–ª–∏
        const targetRoute = publicRoutes.includes(lastVisitedRoute) ? roleBasedRedirect : lastVisitedRoute;

        console.log("üîÑ Redirecting user to:", targetRoute);
        return <Navigate to={targetRoute} replace />;
    }

    return <>{children}</>;
};

export default PublicRoute;
